<?php

/**
 * @file
 * Video filter is a highly flexible and easy extendable filter module to embed
 * any type of video in your site using a simple tag.
 */

/**
 * Implements hook_filter_info().
 */
function video_filter_filter_info() {
  $filters = array();
  $filters['video_filter'] = array(
    'title' => t('Video Filter'),
    'description' => t('Substitutes [video:URL] with embedded HTML.'),
    'process callback' => '_video_filter_process',
    'settings callback' => '_video_filter_settings',
    'default settings' => array(
      'video_filter_width' => '400',
      'video_filter_height' => '400',
    ),
    'tips callback' => '_video_filter_tips',
    // See http://drupal.org/node/1061244.
    'weight' => -1,
  );
  return $filters;
}

function _video_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {

  $settings['video_filter_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Default width setting'),
    '#default_value' => isset($filter->settings['video_filter_width']) ? $filter->settings['video_filter_width'] : $defaults['video_filter_width'],
    '#maxlength' => 4,
  );
  $settings['video_filter_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Default height setting'),
    '#default_value' => isset($filter->settings['video_filter_height']) ? $filter->settings['video_filter_height'] : $defaults['video_filter_height'],
    '#maxlength' => 4,
  );
  return $settings;
}

function _video_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
      <p>========= 使用方法 =========</p>
      <br>
      <p>[video:url]</p>
      <p>基本用法：</p>
      <p>[video:http://v.youku.com/v_show/id_XMTM0OTIyNzkyNA==.html?from=y1.7-1.2]</p>
      <p>设置长宽：</p>
      <p>[video:http://v.youku.com/v_show/id_XMTM0OTIyNzkyNA==.html?from=y1.7-1.2 width:800 height:600]</p>
      <p>设置画面比：</p>
      <p>[video:http://v.youku.com/v_show/id_XMTM0OTIyNzkyNA==.html?from=y1.7-1.2 width:800 height:600 ratio:4/3]</p>
      ');
  }
  else {
    return t('You may insert videos with [video:URL]');
  }
}

function _video_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[video(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {
    foreach ($matches_code[0] as $ci => $code) {
      $video = array(
        'source' => $matches_code[2][$ci],
      );

      $video['source'] = _getSwf($video['source']);

      if ($matches_code[3][$ci] && preg_match_all('/\s+([a-zA-Z_]+)\:(\s+)?([0-9a-zA-Z\/]+)/i', $matches_code[3][$ci], $matches_attributes)) {
        foreach ($matches_attributes[0] as $ai => $attribute) {
          $video[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
        }
      }

      $ratio = 1;

      if (isset($video['ratio']) && preg_match('/(\d+)\/(\d+)/', $video['ratio'], $tratio)) {
        // Validate given ratio parameter.
        $ratio = $tratio[1] / $tratio[2];
      }

      // First, check if user has set a width.
      if (isset($video['width']) && !isset($video['height'])) {
        $video['height'] = $filter->settings['video_filter_height'];
      }
      // Else, if user has set height.
      elseif (isset($video['height']) && !isset($video['width'])) {
        $video['width'] = $video['height'] * $ratio;
      }
      // Maybe both?
      elseif (isset($video['height']) && isset($video['width'])) {
        $video['width'] = $video['width'];
        $video['height'] = $video['height'];
      }
      // Fall back to defaults.
      elseif (!isset($video['height']) && !isset($video['width'])) {
        $video['width'] = $filter->settings['video_filter_width'] != '' ? $filter->settings['video_filter_width'] : 400;
        $video['height'] = $filter->settings['video_filter_height'] != '' ? $filter->settings['video_filter_height'] : 400;
      }

      // Default value for control bar height.
      $control_bar_height = 0;
      if (isset($video['control_bar_height'])) {
        // Respect control_bar_height option if present.
        $control_bar_height = $video['control_bar_height'];
      }

      // Resize to fit within width and height repecting aspect ratio.
      if ($ratio) {
        $scale_factor = min(array(
          ($video['height'] - $control_bar_height),
          $video['width'] / $ratio,
        ));
        $video['height'] = round($scale_factor + $control_bar_height);
        $video['width'] = round($scale_factor * $ratio);
      }

      $video['align'] = (isset($video['align']) && in_array($video['align'], array(
        'left',
        'right',
        'center',
      ))) ? $video['align'] : NULL;

      // Let modules have final say on video parameters.
      drupal_alter('video_filter_video', $video);

      $replacement = video_filter_flash($video);

      $text = str_replace($code, $replacement, $text);
    }
  }
  return $text;
}

/**
 * Wrapper that calls the theme function.
 */
function video_filter_flash($video, $params = array()) {
  return theme('video_filter_flash', array('video' => $video, 'params' => $params));
}

/**
 * Function that outputs the <object> element.
 *
 * @ingroup themeable
 */
function theme_video_filter_flash($variables) {
  $output = '';

  $video = $variables['video'];
  $params = isset($variables['params']) ? $variables['params'] : array();

  $output .= '<object type="application/x-shockwave-flash" ';

  $output .= 'width="' . $video['width'] . '" height="' . $video['height'] . '" data="' . $video['source'] . '">' . "\n";

  $defaults = array(
    'movie' => $video['source'],
    'wmode' => 'transparent',
    'allowFullScreen' => 'true',
  );

  $params = array_merge($defaults, (is_array($params) && count($params)) ? $params : array());

  foreach ($params as $name => $value) {
    $output .= '  <param name="' . $name . '" value="' . $value . '" />' . "\n";
  }

  $output .= '</object>' . "\n";

  return $output;
}

/**
 * Implements hook_theme().
 */
function video_filter_theme($existing, $type, $theme, $path) {
  return array(
    'video_filter_flash' => array(
      'variables' => array('video' => NULL, 'params' => NULL),
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function video_filter_element_info_alter(&$types) {
  if (isset($types['text_format']['#pre_render']) && is_array($types['text_format']['#pre_render'])) {
    if (in_array('ckeditor_pre_render_text_format', $types['text_format']['#pre_render'])) {
      _video_filter_add_settings('ckeditor');
    }
  }
}

/*
 * 根据用户提交的(swf/html)地址，获取优酷，土豆的swf播放地址
 * */
function _getSwf ($url = '') {
    if(isset($url) && !empty($url)){
        preg_match_all('/http:\/\/(.*?)?\.(.*?)?\.com\/(.*)/',$url,$types);
    }else{
        return false;
    }
    $type = $types[2][0];
    $domain = $types[1][0];
    $isswf = strpos($types[3][0], 'v.swf') === false ? false : true;
    $method = substr($types[3][0],0,1);

    switch ($type){
        case 'youku' :
            if( $domain == 'player' ) {
                $swf = $url;
            }else if( $domain == 'v' ) {
                preg_match_all('/http:\/\/v\.youku\.com\/v_show\/id_(.*)?\.html/',$url,$url_array);
                $swf = 'http://player.youku.com/player.php/sid/'.str_replace('/','',$url_array[1][0]).'/v.swf';
            }else{
                $swf = $url;
            }
            break;
        case 'tudou' :
            if($isswf){
                $swf = $url;
            }else{
                $method = $method == 'p' ? 'v' : $method ;
                preg_match_all('/http:\/\/www.tudou\.com\/(.*)?\/(.*)?/',$url,$url_array);
                $str_arr = explode('/',$url_array[1][0]);
                $count = count($str_arr);
                if($count == 1) {
                    $id = explode('.',$url_array[2][0])[0];
                }else if($count == 2){
                    $id = $str_arr[1];
                }else if($count == 3){
                    $id = $str_arr[2];
                }
                $swf = 'http://www.tudou.com/'.$method.'/'.$id.'/v.swf';
            }
            break;
        default :
            $swf = $url;
            break;
    }
    return $swf;
}


function _video_filter_add_settings($editor) {
  static $editor_settings_added = array();
  static $global_settings_added = FALSE;

  if (!$global_settings_added) {
    $global_settings_added = TRUE;

    // Add global settings for video_filter.
    $settings = array(
      'video_filter' => array(
        'modulepath' => drupal_get_path('module', 'video_filter'),
      ),
    );
    drupal_add_js($settings, 'setting');
  }
}
